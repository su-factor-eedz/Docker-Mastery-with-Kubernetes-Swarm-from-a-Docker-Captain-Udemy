# 18. Check Our Docker Install and Config
- [docker version]
- [docker info]
- Used to be [docker run]
- Now is [docker container run] in [docker command + sub-command] form after the number of commands exploded and needed to become grouped
- New commands will not have short format; must be a sub-command of existing command


# 19. Starting a Nginx Web Server
- Image - binaries, libraries, source code,... that make up your application
- Container - running instance of Image as a process
- Registry - storage for container images (e.g. Docker Hub)
- [docker container run --publish 80:80 nginx]
- NOTE: For Windows, Ctrl-C exits foreground container process but leave it running in background
- [docker container run --publsih 80:80 --detach nginx]
-- returns unique container id
-- NOTE: For Windows, additional command to stop container: [docker stop <container id/name>]
- [docker container ls] OLD WAY: [docker ps]
- [docker container stop <first few digits of id>] OLD WAY: [docker stop <first few digits of id>] stops container but doesn't remove it
- [docker container ls] only shows running containers
- [docker container ls -a] shows stopped ones too
- [docker container run] ALWAYS starts new container
- [docker container start] starts an EXISTING stopped one
- *Container ID* is created for us and *Container Name* is as well if we don't specify (the latter, which will use adjectives and surnames of notable hackers or scientists)
- [docker container run --publish 80:80 --detach --name webhost nginx]
- [docker container logs webhost]
- [docker container top webhost] shows process running inside the container
- [docker container rm] OLDWAY: [docker rm] to delete one or more containers
-- [docker container rm 63f 690...]
-- but must first stop running containers OR force it: [docker container rm -f 63f]


# 20. Debrief: What Happens When We Run a Container
## What happens in 'docker container run'
- pulls image down from remote image repository (default is Docker Hub), if image is not found in local image cache
- pulls download latest image version if version not specified
- creates new container based on image by putting layers of changes over it
- gives container virtual IP address on network inside docker engine
- opens up port if specified with [--publish]; otherwise does not open ports at all
- container starts with command specified in the Dockerfile
- can also set default command when it starts container
[docker container run --publish 8080:80 --name webhost -d nginx:1:11 nginx -T]


# 21. Container VS. VM: It's Just a Process
- Containers are just a [process] running on host OS
- https://www.bretfisher.com/docker-for-mac-commands-for-getting-into-local-docker-vm/
-- [docker run -it --rm --privileged --pid=host justincormack/nsenter1]
-- [docker run -it --rm --privileged --pid=host mongo]
-- connect to tty on Docker for Mac VM
[screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty]
-- disconnect that session but leave it open in background
[Ctrl-a d]
-- list that session that's still running in background
[screen -ls]
-- reconnect to that session (don't open a new one, that won't work and 2nd tty will give you garbled screen)
[screen -r]
-- kill this session (window) and exit
[Ctrl-a k]
- Find running process with [ps aux | grep mongodb]
- Stop it with [docker container stop mongo]
- Start it with [docker container start mongo]

[[Resources]]
https://www.bretfisher.com/docker-for-mac-commands-for-getting-into-local-docker-vm/
https://www.bretfisher.com/getting-a-shell-in-the-docker-for-windows-vm/
https://github.com/mikegcoleman/docker101/blob/master/Docker_eBook_Jan_2017.pdf
https://www.youtube.com/watch?v=sK5i-N34im8&feature=youtu.be&list=PLBmVKD7o3L8v7Kl_XXh3KaJl9Qw2lyuFl


# 22. Windows Containers: Docker Is No Longer Just Linux
Windows Containers and Docker: 101
https://www.youtube.com/watch?v=066-9yw8-7c
- 7:00 minutes for starting container and commands within it
- [docker run -it sixeyed/print-env powershell]
- [docker run -it sixeyed/print-env ping -n 100 192.168.2.150]
Versus
- [docker run -it sixeyed/print-env]
- [docker run -d sixeyed/print-env]
- [docker inspect] allows viewing of IP address of container needed to connect to container service running on Windows host if you're logged on locally to it
- in 2017, could only run Win containers on Win, Linux on Linux, but can combine them into one Docker Swarm used as a cross-platform compute cluster
- Twitter Docker Captains: https://is.gd/7nU0if
- Getting Started Docs: Docker https://is.gd/5WrZLC, MSDN https://is.gd/Qnd2LD
- @EltonStoneman https://is.gd/jEUW1r

Beyond \ - the path to Windows and Linux parity in Docker
https://www.youtube.com/watch?v=4ZY_4OeyJsw
"-Bringing Docker to Windows has been an awesome project - while at times challenging or frustrating the overwhelming majority of the times itâ€™s just been fun.  This talk will focus on the work it took to bring Windows and Docker together, some of the areas where gaps remain between the Windows and Linux platform (specific to Docker) and the roadmap towards convergence.  We will discuss some of the tradeoffs and choices we made as well as some of the lessons we took from the Linux ecosystem and how we applied them as we built out Windows support."

Docker + Microsoft - Investing in the Future of your Applications
https://www.youtube.com/watch?v=QASAqcuuzgI
"When you combine Docker's cross platform support of Linux and Windows containers and Microsoft cloud technologies, you get a supercharged portfolio that can support virtually every enterprise workload. Whether you host your workloads in private datacenters, public cloud or hybrid we offer great end-to-end solutions or individual components from the developer's keyboard to cloud. Azure Container Service is the simplest way to deploy your container orchestration environment such as Docker Datacenter so your developers can deploy their apps more quickly. Windows Server Containers are powered by Docker Enterprise Edition. You use the same Docker tooling to build and run those containers as you do your Linux containers and with the tooling you choose - Eclipse, Visual Studio, Jenkins, Visual Studio Team Service. Microsoft + Docker empowers you, the developer to build cutting edge apps - quickly!"


# 23. Assignment: Manage Multiple Containers
- docs.docker.com and --help
- run a nginx, mysql, and https server
- run all of them with --detach or -d, name them with --name
- listen on different ports: nginx 80:80, httpd 8080:80, mysql 3306:3306
- container command option is [environment variable passing]
-- when running mysql, use [--env] to pass in [MYSQL_RANDOM_ROOT_PASSWORD=yes]
-- use the [docker container logs] command to find out what password will be
- when done, clean up with [docker container stop] and [docker container rm]


# 24. Assignment Answers: Manage Multiple Containers
## MY ANSWERS

[docker container run --publish 3306:3306 --detach --name mymysql --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql]

[docker container run --publish 8080:80 --detach --name myhttpd httpd]

[docker container run --publish 80:80 --detach --name mynginx nginx]

### used this command to find the generated random password:
[docker logs mymysql 2>/dev/null | grep "GENERATED"]

### confirmed web services good:
AirTight:udemy-docker-mastery twostudy$ curl host:8080
curl: (6) Could not resolve host: host
AirTight:udemy-docker-mastery twostudy$ curl localhost:8080
<html><body><h1>It works!</h1></body></html>

### stop then delete containers
docker container stop mymysql mynginx myhttpd
docker container rm mymysql myhttpd mynginx


## LESSON ANSWERS
- mostly the same
- hardest part was revealing the randomly generated mysql password that was not displayed in [docker inspect] and was instead found in the command above


# 25. What's Going On In Containers: CLI Process Monitoring
[docker container top] shows process list of what's running inside container
[docker container inspect] shows details on how container started and how it's configured with volumes, networking,... {{OLD WAY}}: [docker inspect]
[docker container stats] performance stats for all containers in a real-time stream {{OLD WAY}}: [docker stats]


# 26. Getting a Shell Inside Containers: No Need for SSH
[docker container run -it] start new container interactively
[docker container exec -it] run additional command in existing container
[docker container run -it --name proxy nginx bash]
[exit] to leave that interactive bash session
[docker container run -it --name myubuntu ubuntu] automatically drops you into bash because its default CMD is bash
- there you can run [apt-get update] and [apt-get install -y curl]
- very minimal compared to live CD or Ubuntu ISO, so you can just add more software to it
- can [exit] and get back in with [docker container start -ai myubuntu]
- [docker container exec -it mysql bash]
- can [exit] and NOT stop the container, because it was already running upon connection

## Alpine
[docker image pull alpine] security focused small 5MB image also with its own package manager
[docker container run -it --name my-alpine alpine sh] SH because BASH is not available in image
[apk] is the package manager, and can be used to install bash, if needed
[apk add bash]
- ideal for container images due to small size


# 27. Docker Networks: Concepts for Private and Public Comms in Containers
- each container connected to a private virtual network ["bridge"]
- each [virtual network] routes through [NAT firewall] on host IP
- all containers on virtual network can talk to each other inside host (without -p)
- can create virtual networks to logically separate containers/apps
- can have multiple virtual networks connected to one container
- can have container talk to NO networks
- [Skip Virtual Networks] by using host IP [--net=host]
- use [inspect --format] to get IP address:
[docker container inspect --format '{{ .NetworkSettings.IPAddress }}' engine]
- above command requires double quotes if using Windows


# 28. FIXME: Change In Official Nginx Image Removes Ping
replace [docker container run <stuff> nginx] with:
[docker container run <stuff> nginx:alpine] since it still has [ping] in it, unlike nginx:latest image


# 29. Docker Networks: CLI Management of Virtual Networks
[docker network ls] bridge/docker0 is default Docker virtual network, NAT'd behind host IP
[docker network inspect]
[docker network create --driver] --driver is optional
[connect] attach a network to a container
[disconnect] detach a network from a container
- Find containers attached to bridge network: 
[docker network inspect 3621c83d7c44 --format ' {{ .Containers }}']
[docker network inspect bridge --format ' {{ .Containers }}']
- Look at IPAM config showing default network of [172.17.0.0/16] gateway 172.17.0.1
[docker network inspect bridge] and see "IPAM" config
- Note [host] network is what allows use of [--network host] to skip virtual networks, gain performance, but sacrifice security of container model, attaching container DIRECTLY to host interface
[docker network ls] to see list of [bridge, host, none]
- [none] is like having a computer interface not attached to anything
- Create your first network:
[docker network create my_app_net] where the [DRIVER] value is [bridge] as the default driver 
-- [bridge] simple driver that create virtual network locally with its own subnet somewhere around 172.17.x.x and above, incrementing as it goes (i.e. 172.18.x.x, 172.19.x.x,...)
-- does NOT have advanced features like [Overlay Networks] that allow private networking between hosts, nor other 3rd-party drivers like [Weave]
[docker network create --help]

[--network] option can be used when creating a container:
[docker container run --detach --name my_engine --network my_app_net nginx]

then [docker network inspect my_app_net --format ' {{ .Containers }} '] will show your attached container

or use [docker network inspect my_app_net] to see all info, like how it use the next subnet available:
"Containers": {
            "a4d8ac053c9123ec927901da7ea604c7243270369320c2b711b67608eba5cc58": {
                "Name": "my_engine",
                "EndpointID": "134bd65c000acbd3785592665ce1c9c3ac03308f4a71c780d8f247f56099f9ff",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        }

- attach the new network to original container:
[docker network connect my_app_net engine]

- confirm both containers now attached to network:
[docker network inspect my_app_net]

- confirm original container attached to both bridge and new network:
[docker container inspect engine]

- disconnect network from original container:
[docker network disconnect 1644301a5c47 01abff9604bf]

# 30. Docker Networks: DNS and How Containers Find Each Other
- Docker uses [container names] as equivalent of [host names]
- our newly created network automatically gets a special new feature which is [Automatic DNS Resolution] for all containers on that network
- create another container attached to new network:
[docker container run --detach --name my_engine_0 --network my_app_net nginx:alpine]
- note: Docker sets host name to container name, but you can also set [aliases]

- now, connect to new container
[docker container exec -it my_engine_0 ping my_engine]

- [docker compose] will automatically create new virtual networks whenever you spin up an app with it

- otherwise [--link] can be used to apply DNS to your network


# 31. Assignment: Using Containers for CLI Testing
- use curl in CentOS vs Ubuntu

# 32. Assignment Answers: Using Containers for CLI Testing
## My Answers
[docker container run -it --name cents centos:7 bash]
[curl --version]
[yum update curl]
7.29
still 7.29 after update

[docker container run -it --name bunts ubuntu:14.04 bash]
[apt-get update && apt-get install curl]
[curl --version]
7.35

## Lesson Answers
[--rm] makes it so you don't have to clean up afterwards


# 33. FIXME: Bug in alpine affects nslookup
- nslookup
- alpine:latest
- early 2020 but introduced in latest Alpine image 3.11.3 that affects how nslookup works on hostnames
- solution: use modified command with dot added: [nslookup search.], or use older Alpine image like 3.10
- bug tracked here: https://github.com/gliderlabs/docker-alpine/issues/539


# 34. Assignment: DNS Round Robin Test
- Docker Engine 1.11 introduced multiple containers on network responding to same DNS address using [aliases]
- image: [elasticsearch:2]
- use [-network-alias search] when creating 2 containers
- run [alpine nslookup search] with [--net] to see the two containers in the output
- run [centos curl -s search:9200] with [--net] multiple times until both names eventually come up
[[Resources]]
*Round-robin DNS*
https://en.wikipedia.org/wiki/Round-robin_DNS

# 35. Assignment Answers: DNS Round Robin Test
## My Answers

**docker network connect**
https://docs.docker.com/engine/reference/commandline/network_connect/

[docker network create searchthis]
[docker container run --detach elasticsearch:2]
[docker container run --detach elasticsearch:2]
[docker network connect --alias search searchthis 3b520478cfa4]
[docker network connect --alias search searchthis e67140af105a]
[docker container run -it --rm --detach alpine:3.10 nslookup search]
[docker container run -it --rm --detach centos curl -s search:9200]

## Lesson Answers
[docker network create searchthis]
[docker container run --detach --network searchthis --network-alias search elasticsearch:2]
[docker container run --detach --network searchthis --network-alias search elasticsearch:2]
[docker container run -it --rm --network searchthis alpine:3.10 nslookup search] actually without [-it]
[docker container run -it --rm --network searchthis centos curl -s search:9200]
