# 46. Container Lifeteime & Persistent Data
- Containers are meant to be immutable and ephemeral
- Immutable infrastructure - don't change things while they're running; changes take place re-deploying a new container
- "separation of concerns" - 
- "persistent data" - unique data that must persistent separate from containers related to them
- Two Persistent Data Solutions - 1. Data Volumes (storage of unique data outside of container's union files system, allowing attachment to any container, seen like a local file path) 2. Bind Mounts (sharing or mounting of a [host] directory or file into a container, appearing like a local path to the container)

[[Resources]]
- An introduction to immutable infrastructure
Why you should stop managing infrastructure and start really programming it.
https://www.oreilly.com/radar/an-introduction-to-immutable-infrastructure/

- The twelve-factor app
https://12factor.net/

- 12 Fractured Apps
https://medium.com/@kelseyhightower/12-fractured-apps-1080c73d481c#.cjvkgw4b3

- Manage data in Docker
https://docs.docker.com/storage/


# 47. Persistent Data: Data Volumes
- use a MySQL image on Docker Hub to learn defaults and best practices: https://github.com/docker-library/mysql/blob/d284e15821ac64b6eda1b146775bf4b6f4844077/8.0/Dockerfile
- note the [VOLUME] stanza showing the default location of the MySQL database: [VOLUME /var/lib/mysql]
- do a [docker volume prune] to clear out existing noise of volumes
- then do [docker pull mysql]
- then [docker image inspect mysql]
- now run a container [docker container run --detach --name my-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql]
- use [docker container inspect my-mysql] to see "Mounts" section where the container has a unique [Source] location on the host to store the container's [Destination] data:
[            "Source": "/var/lib/docker/volumes/f2cff4b93cc08940c67548b8c7368059b8331f3d7f9dcdd9fc3af7e217913384/_data",
                "Destination": "/var/lib/mysql",]
- use [docker volume ls] to also view that Source value:
[docker volume ls
DRIVER              VOLUME NAME
local               f2cff4b93cc08940c67548b8c7368059b8331f3d7f9dcdd9fc3af7e21791338]
- then use [docker volume inspect f2cff4b93cc08940c67548b8c7368059b8331f3d7f9dcdd9fc3af7e217913384] for more info on it
- on LINUX, you CAN navigate to that "Mountpoint": "/var/lib/docker/volumes/f2cff4b93cc08940c67548b8c7368059b8331f3d7f9dcdd9fc3af7e217913384/_data" location to see the databases; on MAC and WINDOWS, you'd have to navigate into the Linux VM to see that path
- you CAN from the container what volume(s) it is using, but you CANNOT from the volume see what container it is connected to
- if you RM or STOP the containers, the associated volumes REMAIN

[Named Volumes] allow you specify things in [docker container run]
- use the [-v] switch to create a named volume: [docker container run --detach --name my-mysql-named-vol -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v my-mysql-db:/var/lib/mysql mysql]
- then [docker volume ls] to see it with a friendly name you can associate with your container
- then [docker volume inspect my-mysql-db] to see the cleaner Mountpoint path: ["Mountpoint": "/var/lib/docker/volumes/my-mysql-db/_data",]
- then delete the container: [docker container rm -f my-mysql-named-vol]
- then create a new container name: docker container run --detach --name my-mysql-named-vol2 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v my-mysql-db:/var/lib/mysql mysql
- it is still using the same volume: [docker volume ls]
- [docker container inspect my-mysql-named-vol] shows friendly Source location: ["Source": "/var/lib/docker/volumes/my-mysql-db/_data",]

[WHY USE -v] - to allow use of the same database over and over again regardless of state of attached container

[WHY USE docker volume create]
- to specify a different driver, options to use on that driver, and/or put labels on it
- otherwise, for locatl development purposes, just specifying it in a Dockerfile or at the run command is fine


# 48. Shell Differences for Path Expansion
"In the next lecture, you'll learn how to share files and directories between a host and a Docker container. One of the parts of the command line you'll need to type is the host file path you want to share.

With Docker CLI, you can always use a full file path on any OS, but often you'll see me and others use a "parameter expansion" like $(pwd) which means "print working directory".

Here's the important part. Each shell may do this differently, so here's a cheat sheet for which OS and Shell your using. I'll be using $(pwd) on a Mac, but yours may be different!

This isn't a Docker thing, it's a Shell thing.

For PowerShell use: ${pwd} 

For cmd.exe "Command Prompt use: %cd%

Linux/macOS bash, sh, zsh, and Windows Docker Toolbox Quickstart Terminal use: $(pwd) 

Note, if you have spaces in your path, you'll usually need to quote the whole path in the docker command."


# 49. Persistent Data: Bind Mounting
- [Bind Mounting] mapping of host file/directory to container file/directory
- skips UFS like other volumes, so persists even after deleting container
- CAN'T specify them in the [Dockerfile], HAVE to use them at runtime when you use the [docker container run] command
[docker container run -v /Users/bret/stuff:/path/container] (mac/linux)
[docker container run -v //c/Users/bret/stuff:/path/container] (windows)
- difference between the above syntax and Named Volumes is the leading forward slash
- "the host always wins"
- can make it read-only
- useful when containers are accessing files you're using or changing on your host:
[docker container run --detach --name my-nginx --publish 80:80 -v $(pwd):/usr/share/nginx/html nginx]
-- then open http://localhost
-- then change any word in index.html (referenced in the Dockerfile)
-- then see the change in real-time by visiting the index.html file again
-- since the entire directory is mapped, all file changes are reflected automatically in the running container

# Quiz 5: Quiz on Persistent Data

# 50. Assignment: Database Upgrades with Named Volumes
- [postgres] container v 9.6.1
- named volume [psql-data]
- [VOLUME] path from Docker Hub
- versions "needed to run it"
- watch logs to confirm done
- stop container
- new container with v 9.6.2, SAME named volume


# 51. Assignment Answers: Database Upgrades with Named Volumes
**MY ANSWERS**
Per https://github.com/docker-library/postgres/blob/17c71aef1940ef0d2cc8bdc8bf7fb0a2856c8326/9.6/Dockerfile, the [VOLUME] path is going to be /var/lib/postgresql/data

**create container**
[docker container run --detach --name postgres-upgrading -v $(pwd)/upgrade-this:/var/lib/postgresql/data postgres:9.6.1]

**view logs**
[docker logs postgres-upgrading]
AirTight:upgrade-this twostudy$ docker logs postgres-upgrading
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

Data page checksums are disabled.

fixing permissions on existing directory /var/lib/postgresql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok
syncing data to disk ... ok

Success. You can now start the database server using:

    pg_ctl -D /var/lib/postgresql/data -l logfile start


WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.
****************************************************
WARNING: No password has been set for the database.
         This will allow anyone with access to the
         Postgres port to access your database. In
         Docker's default configuration, this is
         effectively any other container on the same
         system.

         Use "-e POSTGRES_PASSWORD=password" to set
         it in "docker run".
****************************************************
waiting for server to start....LOG:  could not bind IPv6 socket: Cannot assign requested address
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
LOG:  database system was shut down at 2020-04-06 03:48:35 UTC
LOG:  MultiXact member wraparound protections are now enabled
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started
 done
server started
ALTER ROLE


/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*

LOG:  received fast shutdown request
LOG:  aborting any active transactions
LOG:  autovacuum launcher shutting down
waiting for server to shut down...LOG:  shutting down
.LOG:  database system is shut down
 done
server stopped

PostgreSQL init process complete; ready for start up.

LOG:  database system was shut down at 2020-04-06 03:48:42 UTC
LOG:  MultiXact member wraparound protections are now enabled
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started

*create upgrade container*
[[docker container run --detach --name postgres-upgrading -v $(pwd)/upgrade-this:/var/lib/postgresql/data postgres:9.6.2]
]

**view logs**
AirTight:upgrade-this twostudy$ docker logs postgres-upgrading
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

Data page checksums are disabled.

fixing permissions on existing directory /var/lib/postgresql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
AirTight:upgrade-this twostudy$ docker logs postgres-upgrading
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

Data page checksums are disabled.

fixing permissions on existing directory /var/lib/postgresql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok

**LESSON ANSWERS**
[docker container logs -f postgres-upgrading]


# 52. Assignment: Edit Code Running in Containers With Bind Mounts
- open /Proj/study/udemy/udemy-docker-mastery/bindmount-sample-1
[docker container run --publish 80:4000 -v $(pwd):/site bretfisher/jekyll-serve]
- change markdown file 2017-03-05-welcome-to-jekyll.markdown in /posts
- confirm change in http://localhost

[[Resources]]
Transform your plain text into static websites and blogs.
https://jekyllrb.com/

# 53. Assignment Answers: Edit Code Running in Containers With Bind Mounts
**MY ANSWERS**
[docker container run --publish 80:4000 -v $(pwd):/site bretfisher/jekyll-serve]


# 54. Database Passwords in Containers
"We all know databases usually need passwords, but since the dawn of Docker, the postgres image (and a few others like redis) has allowed you to do a simple docker run on it and it starts without a password. Sure you could set a password but it didn't require one.

In Feburary 2020 that changed, and will affect using postgres in this course (and my others). When running postgres now, you'll need to either set a password, or tell it to allow any connection (which was the default before this change).

For docker run, and the forthcoming Docker Compose sections, you need to either set a password with the environment variable:

POSTGRES_PASSWORD=mypasswd

Or tell it to ignore passwords with the environment variable:

POSTGRES_HOST_AUTH_METHOD=trust

Note this change was in the Docker Hub image, and not a change in postgres itself.

Also note if I or you were pinning versions, as we should, this wouldn't have surprised us. I tend to only pin to the minor version in this course (9.6) rather than the patch version (9.6.16) to keep you a bit more secure in the course. In the real world, I always pin my production apps to the patch version. It's the only safe way to operate. By pinning to the minor version in the courses, I prevent any major changes from breaking the course (in theory ha ha), yet also ensure you're running the latest patches (which would fix any bugs or security problems). In this, *very rare case*, the maintainer of the official postgres decided to introduce a breaking change in the *image* to a patch release of the app. The two aren't related, and it kinda shows off a weakness of the Docker Hub model... that there is no version of the Docker Hub image really, it's just tracking the upstream postgres versions... so then if any Docker Hub change would break something, it can't easily be tracked as a separate version from the app itself. Oh well, just remember to always pin the whole image version for things you care about.

I've updated the course repo files to indicate this change, but if you've cloned the repo before February 18th, 2020, you will need to update or replace your clone."
